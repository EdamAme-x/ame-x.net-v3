---

---

<script is:inline>
	console.log("%c[Theme] Initialized", "color: #00f; font-weight: bold;");

	const setTheme = () => {
		console.log("%c[Theme] Started", "color: #00f; font-weight: bold;");
		const getThemePreference = () => {
			if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
				return localStorage.getItem("theme");
			}
			return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
		};
		const isDark = getThemePreference() === "dark";
		console.log(`%c[Theme] Theme Initial: ${isDark ? "Dark" : "Light"}`, "color: #00f; font-weight: bold;");

		if (isDark) {
			document.documentElement.classList.remove("light");
			document.documentElement.classList.add("dark");
		} else {
			document.documentElement.classList.remove("dark");
			document.documentElement.classList.add("light");
		}

		if (typeof localStorage !== "undefined") {
			const observer = new MutationObserver(() => {
				const isDark = document.documentElement.classList.contains("dark");
				localStorage.setItem("theme", isDark ? "dark" : "light");
				console.log(`%c[Theme] Theme Changed: ${isDark ? "Dark" : "Light"}`, "color: #0f0; font-weight: bold;");
			});
			observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });
		}
		console.log("%c[Theme] Completed", "color: #0f0; font-weight: bold;");
	};

	document.addEventListener("astro:after-swap", () => {
		console.log("%c[Theme] Astro Swap", "color: #f00; font-weight: bold;");
	});
	window.addEventListener("DOMContentLoaded", setTheme);
</script>
